//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Tag = newTagTable("", "tag", "")

type tagTable struct {
	sqlite.Table

	//Columns
	ID        sqlite.ColumnInteger
	Namespace sqlite.ColumnString
	Name      sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type TagTable struct {
	tagTable

	EXCLUDED tagTable
}

// AS creates new TagTable with assigned alias
func (a TagTable) AS(alias string) *TagTable {
	return newTagTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TagTable with assigned schema name
func (a TagTable) FromSchema(schemaName string) *TagTable {
	return newTagTable(schemaName, a.TableName(), a.Alias())
}

func newTagTable(schemaName, tableName, alias string) *TagTable {
	return &TagTable{
		tagTable: newTagTableImpl(schemaName, tableName, alias),
		EXCLUDED: newTagTableImpl("", "excluded", ""),
	}
}

func newTagTableImpl(schemaName, tableName, alias string) tagTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		NamespaceColumn = sqlite.StringColumn("namespace")
		NameColumn      = sqlite.StringColumn("name")
		allColumns      = sqlite.ColumnList{IDColumn, NamespaceColumn, NameColumn}
		mutableColumns  = sqlite.ColumnList{NamespaceColumn, NameColumn}
	)

	return tagTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Namespace: NamespaceColumn,
		Name:      NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
