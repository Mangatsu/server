//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Library = newLibraryTable("", "library", "")

type libraryTable struct {
	sqlite.Table

	//Columns
	ID     sqlite.ColumnInteger
	Path   sqlite.ColumnString
	Layout sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type LibraryTable struct {
	libraryTable

	EXCLUDED libraryTable
}

// AS creates new LibraryTable with assigned alias
func (a LibraryTable) AS(alias string) *LibraryTable {
	return newLibraryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LibraryTable with assigned schema name
func (a LibraryTable) FromSchema(schemaName string) *LibraryTable {
	return newLibraryTable(schemaName, a.TableName(), a.Alias())
}

func newLibraryTable(schemaName, tableName, alias string) *LibraryTable {
	return &LibraryTable{
		libraryTable: newLibraryTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newLibraryTableImpl("", "excluded", ""),
	}
}

func newLibraryTableImpl(schemaName, tableName, alias string) libraryTable {
	var (
		IDColumn       = sqlite.IntegerColumn("id")
		PathColumn     = sqlite.StringColumn("path")
		LayoutColumn   = sqlite.StringColumn("layout")
		allColumns     = sqlite.ColumnList{IDColumn, PathColumn, LayoutColumn}
		mutableColumns = sqlite.ColumnList{PathColumn, LayoutColumn}
	)

	return libraryTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Path:   PathColumn,
		Layout: LayoutColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
